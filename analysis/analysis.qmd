---
title: "analysis"
author: "Olaf König"
format: html
editor: visual
---

```{r}

library(tidyverse)
library(tidylog)
library(terra)
library(sf)
library(mapview)
library(spatstat)
library(mapsf)
library(btb)
library(spData)
library(spdep)
library(viridis)
```

## Loading file

Geofile import (SSEP, NO2, Noise, greenspaces)

```{r}

sf <- read_sf("data_input/data_edit/sep_cross_noise_no2_ndvi.gpkg") %>% 
  select(ssep3:geom) %>% 
  select(id, bfs_nummer, everything())

df <- sf %>% st_drop_geometry()

```

Cities population and lists

```{r}

sf_municipalities <- read_sf("data_input/data_raw/sf_polg_swisstopo.gpkg")

cities_pop <- read_csv("data_input/data_raw/stats_cities.csv") %>% 
  select(bfs_nummer,nom_officiel, POP_2023)

list_cities <- cities_pop %>% 
  pull(bfs_nummer)

list_cities_10 <- cities_pop %>% 
  slice_max(POP_2023, n=10) %>% 
  pull(bfs_nummer)

sf_cities_10 <- sf_municipalities %>% 
  filter(bfs_nummer %in% list_cities_10)
```

## Edit files for cities

Split the sf datasets into cities sf

```{r}

list_sf_by_commune <- sf %>%
  filter(bfs_nummer %in% list_cities_10) %>%
  { split(., .$bfs_nummer) }
```

# Classical linear regression

## National level

Je reprends l'introduction de:

<https://r-spatial.org/book/10-Models.html>

```{r}


# 1. Exposition au bruit expliquée par statut socio-économique, pollution atmosphérique, et vert
mod_bruit <- lm(ssep3_d ~ noise, data = df)
summary(mod_bruit)

# 2. Pollution atmosphérique expliquée par statut socio-économique, bruit, et vert
mod_atm <- lm(ssep3_d ~ no2, data = df)
summary(mod_atm)



```

**Simple regression results:**

-   Simple linear regression shows that socio-economic status (SSEP3) varies in a statistically significant way with air pollution (NO₂) and, to a lesser extent, with noise exposure.

-   However, the proportion of explained variance remains very low: noise accounts for only about 0.1% of the variability in socio-economic status (R² = 0.0009), while NO₂ explains about 5% (R² = 0.052).

-   This means that, in our data, the majority of social inequalities are explained by factors other than noise or air pollution.

### Correlation NO2- Noise

```{r}

cor(df$no2, df$noise, use = "complete.obs")

```

```{r}
library(ggplot2)

ggplot(df, aes(x = no2, y = noise)) +
  geom_point(alpha = 0.1) +
  geom_smooth(method = "loess", col = "red") +
  labs(title = "Relation entre NO2 et bruit",
       x = "NO2 (µg/m³ ou unité)",
       y = "Bruit (dB)") +
  theme_minimal()

```

# Quick check / analysis

## National overview

```{r}

ggplot(df, aes(factor(ssep3_q), noise)) +
  geom_boxplot() +
  labs(x = "Décile socio-économique", y = "Exposition au bruit (dB)",
       title = "Exposition au bruit selon le décile socio-économique")

```

```{r}

ggplot(df, aes(factor(ssep3_q), no2)) +
  geom_boxplot() +
  labs(x = "Décile socio-économique", y = "Exposition au NO₂",
       title = "Exposition au bruit selon le décile socio-économique")
```

```{r}

# Just for the 10 most populated cities
df %>% 
  filter(bfs_nummer %in% list_cities_10) %>% 
  ggplot(aes(factor(ssep3_q), ndvi_200m)) +
    geom_boxplot() +
    labs(x = "Décile socio-économique", y = "Part d'espace à NDVI >= 0.5 dans un rayon de 200m",
         title = "Exposition au bruit selon le décile socio-économique (10 villes)")
```

## 

## Check distribution

```{r}


# Mets toutes tes variables d'intérêt dans un seul data.frame long
df_long <- df %>%
  select(ssep3, no2, noise, ndvi_500m, ndvi_200m) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "value")

# Trace tous les histogrammes d'un coup, avec une facette par variable
ggplot(df_long, aes(x = value)) +
  geom_histogram(bins = 30, fill = "#6B7A8F", color = "white", alpha = 0.8) +
  facet_wrap(~ variable, scales = "free", ncol = 3) +
  theme_minimal() +
  labs(
    title = "Distribution of Main Variables",
    x = NULL, y = "Count"
  )

```

## Choosing indicators (national)

```{r}

library(dplyr)

summary <- df %>%
  group_by(ssep3_q) %>%
  summarise(
    n = n(),
    mean_noise   = mean(noise, na.rm = TRUE),
    median_noise = median(noise, na.rm = TRUE),
    pct_above_50_noise = mean(noise > 50) * 100,
    pct_above_60_noise = mean(noise > 60) * 100,
    mean_no2     = mean(no2, na.rm = TRUE),
    median_no2   = median(no2, na.rm = TRUE),
    pct_above_10_no2 = mean(no2 > 10) * 100, # je garde 10 comme limite de l'OMS au niveau national
    pct_above_20_no2 = mean(no2 > 20) * 100
  )
print(summary)

```

```{r}

library(tidyr)
library(ggplot2)
library(dplyr)

# Si dans summary tu as pct_above_20_no2, sinon adapte
summary_long <- summary %>%
  pivot_longer(
    cols = c(pct_above_50_noise, pct_above_60_noise, pct_above_10_no2, pct_above_20_no2),
    names_to = "seuil",
    values_to = "pct_exposes"
  ) %>%
  mutate(seuil = factor(seuil,
                        levels = c("pct_above_50_noise", "pct_above_60_noise", "pct_above_10_no2", "pct_above_20_no2"),
                        labels = c("Bruit > 50 dB", "Bruit > 60 dB", "NO2 > 10", "NO2 > 20")))

# Graphique small multiples
ggplot(summary_long, aes(x = factor(ssep3_q), y = pct_exposes)) +
  geom_col(fill = "#fc9272", width = 0.7) +
  labs(
    x = "Décile socio-économique (1 = plus défavorisé)",
    y = "Ménages exposés (%)",
    title = "Exposition au bruit et à la pollution NO2 selon les seuils"
  ) +
  theme_minimal(base_family = "IBM Plex Sans") +
  theme(
    plot.title = element_text(face = "bold", size = 15),
    axis.title = element_text(size = 13)
  ) +
  coord_flip() +
  facet_wrap(~ seuil, ncol = 1)

```

## DW National chart

<https://app.datawrapper.de/edit/04LLy/upload>

```{r}

library(DatawRappr)

# Label
ssep3_q_label <- tibble(
  ssep3_q = 1:5,
  label = c("Low", "Middle-Lower", "Middle", "Middle-Upper", "High")
)

summary_long <- summary %>%
  select(ssep3_q, starts_with("pct_above")) %>%
  pivot_longer(
    cols = starts_with("pct_above"),
    names_to = "indicator",
    values_to = "value"
  ) %>%
  mutate(
    type = case_when(
      str_detect(indicator, "noise") ~ "Noise",
      str_detect(indicator, "no2")   ~ "NO2"
    ),
    seuil = case_when(
      indicator %in% c("pct_above_50_noise", "pct_above_10_no2") ~ "seuil1",
      indicator %in% c("pct_above_60_noise", "pct_above_20_no2") ~ "seuil2",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(seuil)) # on garde que les seuils voulus

summary_dw <- summary_long %>%
  select(ssep3_q, type, seuil, value) %>%
  pivot_wider(
    names_from = seuil,
    values_from = value
  )

# On met au format large
summary_dw %>%
  left_join(ssep3_q_label) %>% 
  dw_data_to_chart("04LLy")
  
```

# Cities

**Sort each commune by quantiles (within-commune quantiles) and compute indicators by decile at the commune level**

### Function

```{r}


analyser_commune <- function(df_commune, cities_pop) {
  # Récupérer le code de commune
  commune_code <- unique(df_commune$bfs_nummer)
  # Récupérer le nom officiel
  commune_nom  <- cities_pop$nom_officiel[match(commune_code, cities_pop$bfs_nummer)]
  
  # Calcul quantiles locaux
  df_commune <- df_commune %>%
    group_by(bfs_nummer) %>%
    mutate(
      ssep3d_local_4 = ntile(ssep3, 4),
      ssep3d_local_5 = ntile(ssep3, 5),
      ssep3d_local_10 = ntile(ssep3, 10)
      ) %>%
    ungroup()
  
  # Ajouter le nom aux points
  df_commune$nom_officiel <- commune_nom

  # Stats par quintile local
  df_summary <- df_commune %>%
    group_by(bfs_nummer, ssep3d_local_5) %>%
    summarise(
      n = n(),
      pct_above_50_noise = mean(noise > 50) * 100,
      pct_above_60_noise = mean(noise > 60) * 100,
      pct_above_15_no2  = mean(no2 > 15)  * 100,
      pct_above_20_no2  = mean(no2 > 20)  * 100,
      pct_above_50_ndvi = mean(ndvi_200m > 0.5)  * 100,
      pct_above_60_ndvi = mean(ndvi_200m > 0.6) * 100,
      .groups = "drop"
    ) %>%
    mutate(nom_officiel = commune_nom)
  
  return(list(
    points = df_commune,
    stats  = df_summary
  ))
}


```

#### Call Function

```{r}
#  Appliquer à chaque commune, puis rassembler
resultats_list <- map(list_sf_by_commune, analyser_commune, cities_pop = cities_pop)


# # Visualiser le résultat
# print(resultats_list)
```

## Merge points into one dataset and make the summary for the cities

```{r}

cities_points_ssep_reclassified <- map_dfr(resultats_list, "points")

df_10cities_summary <- cities_points_ssep_reclassified %>%
    group_by(ssep3d_local_5) %>%
    summarise(
      n = n(),
      pct_above_50_noise = mean(noise > 50) * 100,
      pct_above_60_noise = mean(noise > 60) * 100,
      pct_above_15_no2  = mean(no2 > 15)  * 100,
      pct_above_20_no2  = mean(no2 > 20)  * 100,
      pct_above_50_ndvi = mean(ndvi_200m > 0.5)  * 100,
      pct_above_60_ndvi = mean(ndvi_200m > 0.6) * 100,
      .groups = "drop"
    )

df_10cities_summary
```

### DW 10 cities agregated data

<https://app.datawrapper.de/edit/8x6fU/visualize#refine>

```{r}

df_10cities_long <- df_10cities_summary %>%
  st_drop_geometry() %>%
  select(ssep3d_local_5, starts_with("pct_above")) %>%
  pivot_longer(
    cols = starts_with("pct_above"),
    names_to = "indicator",
    values_to = "value"
  ) %>%
  mutate(
    type = case_when(
      str_detect(indicator, "noise") ~ "Noise",
      str_detect(indicator, "no2")   ~ "NO2",
      str_detect(indicator, "ndvi")  ~ "NDVI"
    ),
    seuil = case_when(
      indicator %in% c("pct_above_50_noise", "pct_above_15_no2", "pct_above_50_ndvi") ~ "seuil1",
      indicator %in% c("pct_above_60_noise", "pct_above_20_no2", "pct_above_60_ndvi") ~ "seuil2",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(seuil))

df_10cities_dw <- df_10cities_long %>%
  select(ssep3d_local_5, type, seuil, value) %>%
  pivot_wider(
    names_from = seuil,
    values_from = value
  ) %>%
  left_join(ssep3_q_label, by = c("ssep3d_local_5" = "ssep3_q"))

# Send data to chart
df_10cities_dw %>% dw_data_to_chart("8x6fU")
```

### DW ~~Lollipop~~ chart agregated 10 cities - bar chart with lowest and highest & difference

<https://app.datawrapper.de/edit/VLiac/visualize#refine>

```{r}

df_10cities_dw %>% 
  filter(ssep3d_local_5 %in% c(1, 5)) %>% 
  select(-seuil2, -ssep3d_local_5) %>% 
  pivot_wider(
    names_from = label,
    values_from = seuil1
  ) %>% 
  mutate(
    Diff = abs(Low - High)
  ) %>% 
  dw_data_to_chart("VLiac")
```

### Making ggplot charts for each cities and svg save

```{r}

library(rlang)
plot_commune <- function(df, commune_id, ssep_col = "ssep3d_local_10", output_dir = "data_output/charts/") {
  # Filtrer la commune concernée
  df_commune <- df %>% filter(bfs_nummer == commune_id)
  
  # Récupérer le nom de la commune
  nom_commune <- unique(df_commune$nom_officiel)
  if(length(nom_commune) != 1) {
    warning(paste0("Attention, plusieurs ou aucun nom officiel pour bfs_nummer = ", commune_id))
    nom_commune <- commune_id
  }
  
  # Mettre les données au format long pour ggplot
  df_long <- df_commune %>%
    pivot_longer(
      cols = starts_with("pct_above_"),
      names_to = "seuil",
      values_to = "pct_exposes"
    ) %>%
    mutate(
      seuil = factor(
        seuil,
        levels = c(
          "pct_above_50_noise", "pct_above_60_noise",
          "pct_above_15_no2", "pct_above_20_no2",
          "pct_above_50_ndvi", "pct_above_60_ndvi"
        ),
        labels = c(
          "Bruit > 50 dB", "Bruit > 60 dB",
          "NO2 > 15", "NO2 > 20",
          "NDVI > 0.5 (vert)", "NDVI > 0.75 (très vert)"
        )
      ),
      seuil_type = case_when(
        seuil %in% c("Bruit > 50 dB", "Bruit > 60 dB") ~ "Bruit",
        seuil %in% c("NO2 > 15", "NO2 > 20") ~ "NO2",
        TRUE ~ "NDVI"
      )
    )
  
  couleurs <- c(
    "Bruit" = "#fc9272",
    "NO2"   = "#9ecae1",
    "NDVI"  = "#a1d99b"
  )
  
  # Utilise .data[[ssep_col]] pour référencer dynamiquement la colonne
  p <- ggplot(df_long, aes(x = factor(.data[[ssep_col]]), y = pct_exposes, fill = seuil_type)) +
    geom_col(width = 0.7) +
    scale_fill_manual(values = couleurs) +
    labs(
      x = "Quintile local de statut socio-économique",
      y = "Ménages exposés (%)",
      title = paste0("Commune ", nom_commune, " - Exposition bruit, NO2 & NDVI"),
      fill = NULL
    ) +
    theme_minimal(base_family = "IBM Plex Sans") +
    theme(
      plot.title = element_text(face = "bold", size = 15),
      axis.title = element_text(size = 13)
    ) +
    coord_flip() +
    facet_wrap(~ seuil, ncol = 1)
  
  print(p)
  
  # Créer le dossier s'il n'existe pas
  if (!dir.exists(output_dir)) {
    dir.create(output_dir, recursive = TRUE)
  }
  
  nom_fichier <- gsub("[^a-zA-Z0-9]", "_", nom_commune)
  ggsave(filename = paste0(output_dir, "chart_", nom_fichier, ".svg"), plot = p, width = 10, height = 8)
}

```

```{r}

library(purrr)
all_stats <- map_dfr(resultats_list, "stats")

commune_ids <- unique(all_stats$bfs_nummer)

walk(commune_ids, ~ plot_commune(all_stats, ssep_col = "ssep3d_local_4", commune_id = .x))

```

### GGPLOT Scatterplot

```{r}

cities_points_ssep_reclassified %>% 
  ggplot(aes(x = noise, y = ssep3, color = ssep3d_local_5)) +
  geom_point(size=0.1) +
  facet_wrap(vars(nom_officiel)) +
  theme_minimal()
```

```{r}
cities_points_ssep_reclassified %>% 
  ggplot(aes(x = ndvi_200m, y = ssep3)) + #color = ssep3d_local_5
  geom_point(size=0.01, alpha = 0.1) +
  facet_wrap(vars(nom_officiel)) +
  theme_minimal()
```

```{r}

cities_points_ssep_reclassified %>% 
  ggplot(aes(x = noise, y = ssep3, color = ssep3d_local_5)) +
  geom_point(size=0.1) +
  facet_wrap(vars(nom_officiel)) +
  theme_minimal()
```

### DW Test scatterplot
